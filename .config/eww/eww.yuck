;; --------- variables and polls ---------
(defvar BIN_DIR "./scripts/bin")
(defvar time_rev false)
(defvar not_time_rev true)
(defvar is_calendar_open false)
(defvar show_seconds false)
(defvar gap "0.5%")
(defvar double_gap "1%")
(defvar bar_width "99%")

;; (defpoll clock_time :interval "5s" `date "+\%k \%M"`)
;; (defpoll clock_time :interval "5s" `date '+\%l \%M' \%p`)
(defpoll clock_json :interval "5s" `date '+{"H":"%H","M":"%M"}'`)
(defpoll date_json :interval "1h" `date '+{"d":"%d", "m":"%m", "b":"%b", "Y":"%Y"}'`)
(defpoll clock_seconds :interval "1s" :run-while show_seconds `date +%S`)
;; (defpoll month_num_dot :interval "10h" `date '+.%m.'`)   ;; ".09."
;; (defpoll month_short_comma :interval "10h" `date '+ %b, '`) ;; "Sep,"
(defpoll month_num_dot :interval "1h" `date '+.%m'`)   ;; ".09."
(defpoll month_short_comma :interval "1h" `date '+ %b'`) ;; "Sep,"
(defpoll month_display :interval "1h" `date '+.%m'`)   ;; ".09."
;; (defpoll system_memory_poll :interval "5s" `${BIN_DIR}/format_number $( ${EWW_CMD.available_mem} / 1024 / 1024 ) 0 `)
;; (defpoll system_memory_poll :interval "5s" `echo ${EWW_CMD} get available_mem` )
;; (defpoll system_memory_poll :interval "5s" (concat `scripts/bin/format_number $( `, EWW_CMD.available_mem )` / 1024 / 1024 ) 0 `)

(defpoll has_battery :interval "1m" `if [ -d /sys/class/power_supply/BAT0 ]; then echo "true"; else echo "false"; fi`)
(defpoll battery_json :interval "30s" `~/.config/eww/scripts/battery_info.sh json`)
;; (defpoll battery_percent :interval "30s" `~/.config/eww/scripts/battery_info.sh percent`)
;; (defpoll battery_icon :interval "30s" `~/.config/eww/scripts/battery_info.sh icon`)

(defpoll COL_WLAN :interval "1m"    "bash ~/.config/eww/scripts/wifi.sh --COL")
(defpoll ESSID_WLAN :interval "1m"  "bash ~/.config/eww/scripts/wifi.sh --ESSID")
(defpoll WLAN_ICON :interval "1m"   "bash ~/.config/eww/scripts/wifi.sh --ICON")

(defpoll volume_percent :interval "1s" " bash ~/.config/eww/scripts/sound.sh --percent")
(defpoll volume_icon :interval "1s" " bash ~/.config/eww/scripts/sound.sh --icon")
(defpoll mic_percent :interval "1s" "pactl get-source-volume @DEFAULT_SOURCE@ | grep -oE '[0-9]+%' | head -1 | tr -d '%'")
(defpoll brightness_percent :interval "5s" "brightnessctl -m | cut -d, -f4 | tr -d '%'")


;; dummy
(defwidget dummy []
  (box))

;; debugging
(defvar debug_var "nodebug")
(defwidget debug []
  (label :text debug_var))



;; ---------- widgets ---------

(defwidget sep []
  (box  :class "module-2"
        :vexpand "false"
        :hexpand "false"
        (label  :class "separator"
                :text "|")))

(defwidget gap []
  (box  :orientation "h"
        :hexpand "false"
        :visible "true"
        :width "150"))

(defwidget battery_module []
  (box :class "battery_module"
       :vexpand "false"
       :hexpand "false"
       :visible {has_battery == "true"}
    (label :class "battery_percent" :text "${battery_json.percent}%")
    (label :class "icon" :text "${battery_json.icon}")
    (box :orientation "h" :halign "center" :valign "center" :height 10
      (circular-progress :class "progress_circle"
                         :value {has_battery == "true" ? battery_json.percent : 0}
                         :thickness 4
        (button :class "progress_icon"
                :limit-width 2
                :tooltip {has_battery == "true" ? "battery: ${battery_json.percent}%" : "No battery"}
                :show_truncated false
                :wrap false
                "")))))

(defwidget memory_module []
  (box  :class "memory_module"
        :vexpand "false"
        :hexpand "false" 
    (label :class "icon" :text "󰍛")
    (box :orientation "h" :halign "center" :valign "center" :height 10
      (circular-progress  :class "progress_circle"
                          :value {EWW_RAM.used_mem_perc}
                          :thickness 4
                          :width: 20
        (button :class "progress_icon"
                :limit-width 2
                :tooltip "using ${EWW_RAM.used_mem_perc}% ram"
                :onclick "${EWW_CMD} open --toggle system"
                :show_truncated false
                :wrap false
                "")))))

;; adjust paths if you put scripts elsewhere
(defvar seconds_start_script "$~/.config/eww/scripts/eww_seconds_start.sh")
(defvar seconds_stop_script  "$~/.config/eww/scripts/eww_seconds_stop.sh")
(defwidget clock_module []
  (eventbox
    :class "clock_module"
    :onhover     "${EWW_CMD} update month_display='${month_short_comma}' show_seconds=true"
    :onhoverlost "${EWW_CMD} update month_display='${month_num_dot}' show_seconds=false"
    (button
      :class "clock_date_class"
      :onclick "
        if [ \"$( ${EWW_CMD} get is_calendar_open )\" = \"true\" ]; then
          ${EWW_CMD} close calendar &&
          ${EWW_CMD} update is_calendar_open=false month_display='${month_num_dot}'
        else
          ${EWW_CMD} open calendar &&
          ${EWW_CMD} update is_calendar_open=true
        fi
      "
      (box :class "module" :space-evenly false :orientation "h" :spacing 0

        ;; left: stacked time (hours over minutes, seconds revealed)
        (box :orientation "v" :spacing 0 :class "time-stack"
          (label :class "clock_time_hours"   :text "${clock_json.H}")
          (label :class "clock_time_minutes" :text "${clock_json.M}"))
        ;; reveal seconds only while show_seconds == true
        (revealer :transition "slideright"
                    :reveal show_seconds
                    :duration "160ms"
          (label :class "clock_time_seconds" :text "${clock_seconds}"))

        ;; right: stacked date (day + month on top line, year below)
        (box :orientation "v" :spacing 0 :class "date-stack"
          (label :class "date-day-month" :text "${date_json.d}${month_display}")
          (label :class "date-year"      :text "${date_json.Y}"))))))
        ;; :text "${date_json.d}${month_display}${date_json.Y}")))))

(defvar show_powermenu false)
(defwidget powermenu_module []
  (eventbox :onhover "${EWW_CMD} update show_powermenu=true; date +%s > /tmp/eww_powermenu_shown"
            :onhoverlost "${EWW_CMD} update show_powermenu=false; rm -f /tmp/eww_powermenu_shown"
    (box  :orientation "h"
          :space-evenly "false"
          :hexpand "false"
          :class "powermenu"
      (revealer :transition "slideleft"
                :reveal show_powermenu
                :duration "500ms"
        (box  :orientation "h"
              :space-evenly "false"
          (button :class "button-hyprrestart"
                  :tooltip "Restart Hyprland" 
                  :onclick "hyprctl reload" "")  ; Reload Hyprland config
          (button :class "button-quit"
                  :tooltip "Exit Hyprland"
                  :onclick "hyprctl dispatch exit" "󰍃")  ; Exit Hyprland gracefully
          (button :class "button-lock"
                  :tooltip "Lock Screen"
                  :onclick "sh ~/.config/eww/scripts/lock.sh" "")
          (button :class "button-reb"
                  :tooltip "Reboot"
                  :onclick "systemctl reboot" "")))  ; Systemd reboot
      (button :class "button-off"
              :tooltip "Shutdown"
              :onclick "sh ~/.config/eww/scripts/powerbutton.sh" "󰐥"))))

(defvar wifi_rev "false")
(defwidget wifi_module []
  (eventbox :onhover "${EWW_CMD} update wifi_rev=true"
            :onhoverlost "${EWW_CMD} update wifi_rev=false"
    (box :vexpand false :hexpand false :space-evenly false
      (button :class "wifi_module" 
              :onclick "networkmanager_dmenu" 
              :wrap false 
              :limit-width 12 
              :style "color: ${COL_WLAN};" 
              WLAN_ICON)
      (revealer :transition "slideright"
                :reveal wifi_rev
                :duration "350ms"
        (label  :class "module_essid"
                :text ESSID_WLAN
                :orientation "h")))))

(defvar vol_reveal "false")
(defwidget volume_module []
  (eventbox :onhover "${EWW_CMD} update vol_reveal=true"
            :onhoverlost "${EWW_CMD} update vol_reveal=false"
    (box  :class "volume_module"
          :space-evenly "false"
          :orientation "h"
          :spacing "3"
          :vexpand "true"
          :valign "center"
      (button :onclick "~/.config/eww/scripts/pop audio"
              :class "volume_icon" "${volume_icon}")
      (revealer :transition "slideleft"
                :reveal vol_reveal
                :duration "350ms"
                :vexpand "true"
                :valign "center"
          (progress :class "volbar"
                    :value volume_percent
                    :orientation "horizontal"
                    :vexpand "true"
                    :valign "center"
		    )))))
        ;; (scale :class "volbar"
        ;;       :value volume_percent
        ;;       :orientation "h"
        ;;       :tooltip "${volume_percent}"
        ;;       :max 100
        ;;       :min 0
        ;;       :onchange "pactl set-sink-volume @DEFAULT_SINK@ {}%")))))

(defvar bright_reveal "false")
(defwidget brightness_module []
  (eventbox :onhover "${EWW_CMD} update bright_reveal=true"
            :onhoverlost "${EWW_CMD} update bright_reveal=false"
    (box  :class "brightness_module"
          :space-evenly "false"
          :orientation "h"
          :spacing "3" 
          :vexpand "true"
          :valign "center"
      (label  :text ""
              :class "bright_icon"
              :tooltip "brightness")
      (revealer :transition "slideleft"
                :reveal bright_reveal
                :duration "350ms"
                :vexpand "true"
                :valign "center"
          (progress :class "brightbar"
                    :value brightness_percent
                    :orientation "horizontal"
                    :vexpand "true"
                    :valign "center"
		    )))))
	  ;; (scale  :class "brightbar"
		 ;;      :value "50"
		 ;;      :orientation "h"
		 ;;      :tooltip "${brightness_percent}%"
		 ;;      :max 100
		 ;;      :min 0
		 ;;      :onchange "brightnessctl set {}%" )))))


(deflisten workspaces :initial '{}' "~/.config/eww/scripts/hyprland-workspaces.py")

(defwidget workspaces [monitor]
  (box :orientation "h" :class "workspaces"
    (for wsp in {workspaces[monitor]}
      (button :class "workspace workspace_${wsp.class}"
              :onclick "hyprctl dispatch workspace ${wsp.name}"
        (box
          (label :class "num" :text "${wsp.num}"))))))

;; ---------- bottom bar structure ----------
;; define widget groups
(defwidget left [monitor]
  (box :orientation "h"
       :space-evenly false
       :halign "start"
       :class "left_modules"
  (button :class "button-eww-restart"
          :tooltip "Restart Eww"
          :onclick "sh ~/.config/eww/scripts/restart_eww.sh"
    (box :orientation "v" :halign "center" :spacing 0 :class "eww-restart-stack"
      (label :class "eww-restart-top"    :text "eww")
      (label :class "eww-restart-bottom" :text "⟲")))
  (workspaces :monitor monitor)))

(defwidget center []
  (box  :orientation "h" 
        :space-evenly false  
        :halign "center"
        :class "center_modules"
    (debug)))

(defwidget right []
  (box  :orientation "h" 
        :space-evenly false  
        :halign "end"
        :class "right_modules"
  (brightness_module)
  (volume_module)
  (wifi_module)
  (sep)
  (battery_module)
  (memory_module)
  (sep)
  (powermenu_module)
  (sep)
  (clock_module)))

;; bar
(defwidget bar_layout [monitor]
  (centerbox  :class "bar_class"
              :orientation "h"
    (left :monitor monitor)
    (center)
    (right)))

(defwindow bar0
  :exclusive true
  :monitor "eDP-1"
  :geometry (geometry 
    :x "0px"
    :y "0px"
    :width "100%"
    :height "30px"
    :anchor "bottom center")
  :stacking "fg"
  :windowtype "dock"
  (bar_layout :monitor "eDP-1"))

(defwindow bar1
  :exclusive true
  :monitor "HDMI-A-1"
  :geometry (geometry 
    :x "0px"
    :y "0px"
    :width "100%"
    :height "30px"
    :anchor "bottom center")
  :stacking "fg"
  :windowtype "dock"
  (bar_layout :monitor "HDMI-A-1"))


;; --------- calender ----------

(defwidget calendar_module []
  (box  :class "calendar"
        :orientation "v"
        (box :class "calendar_inner"
          (calendar :day "${date_json.d}"
                    :year "${date_json.Y}"
                    :show-week-numbers true))))

(defwindow calendar
  :stacking "fg"
  :focusable "false"
  :screen 1
  ;; :monitor 0
  :geometry (geometry
    :x "0.5%"
    :y "1%"
    :anchor "bottom right"
    :width "270px"
    :height "60px")
  (calendar_module))

;; --------- system ---------

(defwidget system_module []
  (box  :class "system"
        :orientation "v"
        :space-evenly "false"
        :hexpand "false"
        :vexpand "false"
        :spacing 0
    (box  :class "system_memory_wrapper"
          :orientation "h"
          :space-evenly "false"
          :halign "start"
      (circular-progress :value {EWW_RAM.used_mem_perc}
                         :thickness 9
        (label  :class "system_memory_icon Phosphor_icon"
                :text ""
                :limit-width 2
                :show_truncated false
                :wrap false
                :angle 0.0))
      (box  :orientation "v"
            :halign "start"
            :spacing 0
            :hexpand "false"
            :vexpand "false"
            (label  :class "system_memory_text"
                    :text "memory"
                    :halign "start"
                    :limit-width 9
                    :show_truncated false
                    :wrap false)
            (label  :class "system_memory_subtext"
                    :text "${round((EWW_RAM.available_mem / 1024 / 1024),0)} | ${round((EWW_RAM.total_mem / 1024 / 1024),0)} mb"
                    ;; :text system_memory_poll
                    :halign "start")))))


(defwindow system
  :stacking "fg"
  :focusable "false"
  :screen 1
  ;; :monitor 0
  :geometry (geometry 
    :x "20px"
    :y "7%"
    :anchor "top right"
    :width "290px"
    :height "120px")
  (system_module))





